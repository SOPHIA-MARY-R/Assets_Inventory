@page "/Storage"
@inject NavigationManager NavManager
@using MyFirstBlazorWASMApp.Client.Enums;
<MudTable Dense Elevation=0 Outlined Hover T="StorageModel" Items="Storages">
    <ToolBarContent>
        <MudButton Color=Color.Success OnClick="Redirect" Variant=Variant.Filled DisableElevation StartIcon="@Icons.Material.Filled.Add">
            Create
        </MudButton>
        <MudButton Color=Color.Tertiary Disabled="@_processing" OnClick="ProcessSomething" Class="ma-2" Variant=Variant.Filled DisableElevation StartIcon="@Icons.Material.Filled.Refresh">
        @if (_processing)
        {
            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
            <MudText Class="ms-2">Processing</MudText>
        }
        else
        {
            <MudText>Reload</MudText>
        }
        </MudButton>
        <MudButton Color=Color.Info Class="ma-2" Variant=Variant.Filled DisableElevation StartIcon="@Icons.Custom.FileFormats.FileExcel">
            Export
        </MudButton>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Serial Number</MudTh>
        <MudTh>Model</MudTh>
        <MudTh>Bus type</MudTh>
        <MudTh>Media type</MudTh>
        <MudTh>Health condition</MudTh>
        <MudTh>Friendly name</MudTh>
        <MudTh>Size</MudTh>
        <MudTh>IsActive</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.SerialNumber</MudTd>
        <MudTd>@context.Model</MudTd>
        <MudTd>@context.BusType</MudTd>
        <MudTd>@context.MediaType</MudTd>
        <MudTd>@context.HealthCondition</MudTd>
        <MudTd>@context.FriendlyName</MudTd>
        <MudTd>@context.Size</MudTd>
        <MudTd>
            <MudCheckBox Checked=@context.IsActive ReadOnly/>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager HideRowsPerPage/>
    </PagerContent>
</MudTable>
@code{
    private bool _processing = false;

    async Task ProcessSomething()
    {
        _processing = true;
        await Task.Delay(2000);
        _processing = false;
    }
    private List<StorageModel> Storages = new List<StorageModel>()
    {
        new StorageModel()
        {
            SerialNumber="1234",
            Model="C3PO",
            BusType=DriveBusType.MAX,
            MediaType=DriveMediaType.HDD,
            HealthCondition=DriveHealthCondition.Healthy,
            FriendlyName="Hardy",
            Size=120,
            IsActive=true,
        }
        ,
         new StorageModel()
        {
            SerialNumber="1235",
            Model="C4PE",
            BusType=DriveBusType.FileBackedVirtual,
            MediaType=DriveMediaType.SSD,
            HealthCondition=DriveHealthCondition.Unhealthy,
            FriendlyName="Speed",
            Size=200,
            IsActive=false,
        }
        ,
         new StorageModel()
        {
            SerialNumber="1250",
            Model="C2P1",
            BusType=DriveBusType.FibreChannel,
            MediaType=DriveMediaType.Unspecified,
            HealthCondition=DriveHealthCondition.Unhealthy,
            FriendlyName="Clash",
            Size=220,
            IsActive=true,
        }
        ,
        new StorageModel()
        {
            SerialNumber="1821",
            Model="C8H1",
            BusType=DriveBusType.MMC,
            MediaType=DriveMediaType.SSD,
            HealthCondition=DriveHealthCondition.Warning,
            FriendlyName="Bound",
            Size=210,
            IsActive=true,
        }

    };
    private string searchString = null;
    private bool FilterFunc(KeyboardModel keyboard)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (keyboard.SerialNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (keyboard.Manufacturer.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (keyboard.Model.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{keyboard.SerialNumber} {keyboard.Manufacturer} {keyboard.Model}".Contains(searchString))
            return true;
        return false;
    } 
    void Redirect()
    {
        NavManager.NavigateTo("/StorageForm");
    }
}