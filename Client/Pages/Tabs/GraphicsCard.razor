@page "/GraphicsCard"
@inject NavigationManager NavManager
<MudTable Dense Elevation=0 Outlined Hover T="GraphicsCardModel" Items="GraphicsCards">
    <ToolBarContent>
        <MudButton Color=Color.Success OnClick="Redirect" Variant=Variant.Filled DisableElevation StartIcon="@Icons.Material.Filled.Add">
            Create
        </MudButton>
        <MudButton Color=Color.Tertiary Disabled="@_processing" OnClick="ProcessSomething" Class="ma-2" Variant=Variant.Filled DisableElevation StartIcon="@Icons.Material.Filled.Refresh">
        @if (_processing)
        {
            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
            <MudText Class="ms-2">Processing</MudText>
        }
        else
        {
            <MudText>Reload</MudText>
        }
        </MudButton>
        <MudButton Color=Color.Info Class="ma-2" Variant=Variant.Filled DisableElevation StartIcon="@Icons.Custom.FileFormats.FileExcel">
            Export
        </MudButton>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Serial Number</MudTh>
        <MudTh>Manufacturer</MudTh>
        <MudTh>Model</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.SerialNumber</MudTd>
        <MudTd>@context.Manufacturer</MudTd>
        <MudTd>@context.Model</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager HideRowsPerPage/>
    </PagerContent>
</MudTable>
@code{
    private bool _processing = false;

    async Task ProcessSomething()
    {
        _processing = true;
        await Task.Delay(2000);
        _processing = false;
    }
    private List<GraphicsCardModel> GraphicsCards = new List<GraphicsCardModel>()
    {
        new GraphicsCardModel()
        {
            SerialNumber="1234",
            Manufacturer="Zebronic",
            Model="C3PO"
        }
        ,
        new GraphicsCardModel()
        {
            SerialNumber="1230",
            Manufacturer="Sapphire",
            Model="C4P2"
        }
        ,
        new GraphicsCardModel()
        {
            SerialNumber="2351",
            Manufacturer="Asus",
            Model="C468"
        }
        ,
        new GraphicsCardModel()
        {
            SerialNumber="7635",
            Manufacturer="Intel",
            Model="C65H"
        }
    };
    private string searchString = null;
    private bool FilterFunc(KeyboardModel keyboard)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (keyboard.SerialNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (keyboard.Manufacturer.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (keyboard.Model.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{keyboard.SerialNumber} {keyboard.Manufacturer} {keyboard.Model}".Contains(searchString))
            return true;
        return false;
    } 
     void Redirect()
    {
        NavManager.NavigateTo("/GraphicsForm");
    }
}