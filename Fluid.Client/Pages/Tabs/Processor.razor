@page "/Processor"
@using Fluid.Shared.Enums.Technical
@inject NavigationManager NavManager
@inject IDialogService DialogService
@using Fluid.Client.Pages.Dialogs
@using Fluid.Shared.Enums.Technical;
<MudTable Dense Elevation=0 Outlined Hover T="ProcessorModel" Items="Processors"  Filter="new Func<ProcessorModel,bool>(FilterFunc)">
    <ToolBarContent>
        <MudButton Color=Color.Success OnClick="OpenDialog" Variant=Variant.Filled DisableElevation StartIcon="@Icons.Material.Filled.Add">
            Create
        </MudButton>
        <MudButton Color=Color.Tertiary Class="ma-2" Variant=Variant.Filled DisableElevation StartIcon="@Icons.Material.Filled.Refresh">
            Reload
        </MudButton>
        <MudButton Color=Color.Info Class="ma-2" Variant=Variant.Filled DisableElevation StartIcon="@Icons.Custom.FileFormats.FileExcel">
            Export
        </MudButton>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Serial Number</MudTh>
        <MudTh>Manufacturer</MudTh>
        <MudTh>ProcessorID</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Architecture</MudTh>
        <MudTh>Family</MudTh>
        <MudTh>No of cores</MudTh>
        <MudTh Class="align-content-center">No of Logical Processors</MudTh>
        <MudTh>Thread count</MudTh>
        <MudTh>Max clock speed</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.SerialNumber</MudTd>
        <MudTd>@context.Manufacturer</MudTd>
        <MudTd>@context.ProcessorID</MudTd>
        <MudTd>@context.Name</MudTd>
        <MudTd>@context.Architecture</MudTd>
        <MudTd>@context.Family</MudTd>
        <MudTd>@context.NumberOfCores</MudTd>
        <MudTd>@context.NumberOfLogicalProcessors</MudTd>
        <MudTd>@context.ThreadCount</MudTd>
        <MudTd>@context.MaxClockSpeed</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager HideRowsPerPage/>
    </PagerContent>
</MudTable>
@code{
    private List<ProcessorModel> Processors = new List<ProcessorModel>()
    {
        new ProcessorModel()
        {
            SerialNumber="1234",
            Manufacturer="Zebronic",
            ProcessorID="C3PO",
            Name="Intel",
            Architecture=ProcessorArchitecture.ia64,
            Family=8086,
            NumberOfCores=4,
            NumberOfLogicalProcessors=8,
            ThreadCount=36,
            MaxClockSpeed=2
        }
        ,
        new ProcessorModel()
        {
            SerialNumber="7656",
            Manufacturer="Asus",
            ProcessorID="C3P6",
            Name="Sapphire",
            Architecture=ProcessorArchitecture.ARM64,
            Family=8081,
            NumberOfCores=2,
            NumberOfLogicalProcessors=8,
            ThreadCount=76,
            MaxClockSpeed=3
        }
        ,
        new ProcessorModel()
        {
            SerialNumber="5454",
            Manufacturer="Intel",
            ProcessorID="C2J1",
            Name="Asus",
            Architecture=ProcessorArchitecture.PowerPC,
            Family=8012,
            NumberOfCores=4,
            NumberOfLogicalProcessors=8,
            ThreadCount=23,
            MaxClockSpeed=3
        }
        ,
        new ProcessorModel()
        {
            SerialNumber="2323",
            Manufacturer="Sapphire",
            ProcessorID="J1H1",
            Name="Intel",
            Architecture=ProcessorArchitecture.x86,
            Family=8081,
            NumberOfCores=4,
            NumberOfLogicalProcessors=8,
            ThreadCount=21,
            MaxClockSpeed=3
        }
    };
    private string searchString = null;
    private bool FilterFunc(ProcessorModel processor)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (processor.SerialNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (processor.Manufacturer.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (processor.ProcessorID.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (processor.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (processor.Architecture.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (processor.Family.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (processor.NumberOfCores.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (processor.NumberOfLogicalProcessors.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (processor.ThreadCount.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (processor.MaxClockSpeed.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{processor.SerialNumber} {processor.Manufacturer} {processor.ProcessorID} {processor.Name} {processor.Architecture} {processor.Family} {processor.NumberOfCores} {processor.NumberOfLogicalProcessors} {processor.ThreadCount} {processor.MaxClockSpeed}".Contains(searchString))
            return true;
        return false;
    } 
    private void OpenDialog()
    {
		var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<ProcessorDialog>("", options);
    }
}