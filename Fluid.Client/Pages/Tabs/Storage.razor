@page "/Storage"
@inject NavigationManager NavManager
@inject IDialogService DialogService
@using Fluid.Client.Pages.Dialogs
@using Fluid.Shared.Enums.Technical;
<MudTable Dense Elevation=0 Outlined Hover T="StorageModel" Items="Storages" Filter="new Func<StorageModel,bool>(FilterFunc)">
    <ToolBarContent>
        <MudButton Color=Color.Success OnClick="OpenDialog" Variant=Variant.Filled DisableElevation StartIcon="@Icons.Material.Filled.Add">
            Create
        </MudButton>
        <MudButton Color=Color.Tertiary Class="ma-2" Variant=Variant.Filled DisableElevation StartIcon="@Icons.Material.Filled.Refresh">
            Reload
        </MudButton>
        <MudButton Color=Color.Info Class="ma-2" Variant=Variant.Filled DisableElevation StartIcon="@Icons.Custom.FileFormats.FileExcel">
            Export
        </MudButton>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Serial Number</MudTh>
        <MudTh>Model</MudTh>
        <MudTh>Bus type</MudTh>
        <MudTh>Media type</MudTh>
        <MudTh>Health condition</MudTh>
        <MudTh>Friendly name</MudTh>
        <MudTh>Size</MudTh>
        <MudTh>IsActive</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.SerialNumber</MudTd>
        <MudTd>@context.Model</MudTd>
        <MudTd>@context.BusType</MudTd>
        <MudTd>@context.MediaType</MudTd>
        <MudTd>@context.HealthCondition</MudTd>
        <MudTd>@context.FriendlyName</MudTd>
        <MudTd>@context.Size</MudTd>
        <MudTd>
            <MudCheckBox Checked=@context.IsActive ReadOnly/>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager HideRowsPerPage/>
    </PagerContent>
</MudTable>
@code{
    private List<StorageModel> Storages = new List<StorageModel>()
    {
        new StorageModel()
        {
            SerialNumber="1234",
            Model="C3PO",
            BusType=DriveBusType.MAX,
            MediaType=DriveMediaType.HDD,
            HealthCondition=DriveHealthCondition.Healthy,
            FriendlyName="Hardy",
            Size=120,
            IsActive=true,
        }
        ,
         new StorageModel()
        {
            SerialNumber="1235",
            Model="C4PE",
            BusType=DriveBusType.FileBackedVirtual,
            MediaType=DriveMediaType.SSD,
            HealthCondition=DriveHealthCondition.Unhealthy,
            FriendlyName="Speed",
            Size=200,
            IsActive=false,
        }
        ,
         new StorageModel()
        {
            SerialNumber="1250",
            Model="C2P1",
            BusType=DriveBusType.FibreChannel,
            MediaType=DriveMediaType.Unspecified,
            HealthCondition=DriveHealthCondition.Unhealthy,
            FriendlyName="Clash",
            Size=220,
            IsActive=true,
        }
        ,
        new StorageModel()
        {
            SerialNumber="1821",
            Model="C8H1",
            BusType=DriveBusType.MMC,
            MediaType=DriveMediaType.SSD,
            HealthCondition=DriveHealthCondition.Warning,
            FriendlyName="Bound",
            Size=210,
            IsActive=true,
        }

    };
    private string searchString = null;
    private bool FilterFunc(StorageModel storage)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (storage.SerialNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (storage.Model.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (storage.BusType.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (storage.MediaType.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (storage.HealthCondition.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (storage.FriendlyName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (storage.Size.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{storage.SerialNumber} {storage.Model} {storage.BusType} {storage.MediaType} {storage.HealthCondition} {storage.FriendlyName} {storage.Size}".Contains(searchString))
            return true;
        return false;
    } 
    private void OpenDialog()
    {
		var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<StorageDialog>("", options);
    }
}